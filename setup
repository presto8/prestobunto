#!/usr/bin/env bash

set -Eeu -o pipefail

user_config() {
    # Uncomment the desired installation mode below
    # INSTALL_MODE="user,system"
    # INSTALL_MODE="user-only"
    # INSTALL_MODE="system-only"

    # NOTE! Change the values below to your own
    # Or comment out to disable installation
    # SSH_REMOTE_ACCESS_PUBKEY="ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAID38541mtP7fDpTxoq7kfRlLdCKV0TrBLwht1vyut3+5 (none)"

    # Change the value below to change the hostname
    CHANGE_HOSTNAME_TO=""

    # Set a static IP address for an Interface
    # STATIC_IFACE="eno1"
    # STATIC_ADDRESS="192.168.250.302/24"
}

main() {
    user_config

    if [[ ! -v INSTALL_MODE || -z $INSTALL_MODE ]]; then
        die "must customize user_config before running; hint: ${EDITOR:-nano} $0"
    fi

    check_sudo
    check_ubuntu_version

    if [[ $INSTALL_MODE == *system* ]]; then
        info "configuring system settings"
        change_hostname
        remove_package thunderbird
        remove_package rhythmbox
        setup_static_ip_address
        make_journald_persistent
        allow_user_to_view_journalctl
        remove_update_messages_from_motd
        enable_sudo_without_password
        disable_automatic_updates
        disable_unwanted_services
        disable_login_messages
        disable_graphical_grub
        cloudflare_dns
        disable_sleep
    fi

    if [[ $INSTALL_MODE == *user* ]]; then
        setup_git
        setup_zsh_with_prezto
        setup_ssh
        setup_screen
        setup_nvim
        install_development_packages
        install_wireless_build_packages
        install_ripgrep
        install_fd
        install_fasd
        install_rofi_greenclip
        install_kitty
        cleanup_user_home
        configure_gnome_settings
        disable_suspend_on_lid_closed
        remap_capslock_to_control
        setup_dialout_group
    fi

    info "prestobuntu setup complete!"
}

mute() { "$@" &>/dev/null; }

check_sudo() {
    if (( UID == 0 )); then
        die "must not run as root (tip: don't use sudo)"
    fi

    if ! sudo -n true &>/dev/null; then
        info "root privileges are needed for installation"
        sudo true
    fi
}

apt_update() {
    if [[ ! -v HAVE_APT_UPDATE ]]; then
        kill_apt_inhibitors
        sudo apt-get update
        HAVE_APT_UPDATE=1
    fi
}

install_package() {
    for pkg in "$@"; do
        if ! dpkg -s "$pkg" | grep -q "Status: install ok installed"; then
            apt_update
            info "installing $pkg"
            sudo apt-get install -y "$pkg"
        fi
    done
}

remove_package() {
    if dpkg -s "$1" 2>&1 | grep -vq "is not installed"; then
        info "uninstalling $1"
        sudo apt-get purge -y "$1"
    fi
}

check_ubuntu_version() {
    UBUNTU_VERSION=$(grep RELEASE /etc/lsb-release | grep -Eo '[0-9.]+')
    UBUNTU_VERSION=${UBUNTU_VERSION%%.*}  # keep major version only, e.g. 18

    if (( UBUNTU_VERSION < 22 )); then
        die "prestobuntu only supported on Ubuntu 22.04 or higher"
    fi
}

change_hostname() {
    if [[ -v CHANGE_HOSTNAME_TO && $CHANGE_HOSTNAME_TO ]]; then
        sudo hostnamectl set-hostname "$CHANGE_HOSTNAME_TO"
    fi
}

kill_apt_inhibitors() {
    unwanted='apt|aptd|unattended-upgrade'
    while pgrep -f "$unwanted"; do
        sudo pkill -f "$unwanted" ||:
        sleep 0.5
    done
}

make_journald_persistent() {
    sudo mkdir -p /var/log/journal
}

allow_user_to_view_journalctl() {
    sudo usermod -G systemd-journal -a "$USER"
}

remove_update_messages_from_motd() (
    cd /etc/update-motd.d
    sudo chmod -x 10-help-text 90-updates-available 91-release-upgrade
)

remap_capslock_to_control() {
    dconf write "/org/gnome/desktop/input-sources/xkb-options" "['ctrl:nocaps']"
}

setup_dialout_group() {
    : allow user to access serial/USB devices such as /dev/ttyACM0 or /dev/ttyUSB0
    sudo usermod -G dialout -a "$USER"
}

enable_sudo_without_password() {
    if ! sudo grep -q NOPASSWD /etc/sudoers; then
        : Allow sudo without password
        sudo sed -E -i.bak 's|^(%sudo.+ALL:ALL\)) (ALL)|\1 NOPASSWD:SETENV: \2|' /etc/sudoers
    fi
}

setup_ssh() {
    install_package openssh-server mosh

    if [[ -v SSH_REMOTE_ACCESS_PUBKEY ]]; then
        mkdir -p "$HOME"/.ssh --mode 700
        touch "$HOME"/.ssh/authorized_keys
        _require_line "$SSH_REMOTE_ACCESS_PUBKEY" "$HOME"/.ssh/authorized_keys
        chmod 600 "$HOME"/.ssh/authorized_keys
    fi

    # make sure this system has ssh keys
    if ! test -f ~/.ssh/id_rsa; then
        ssh-keygen -N "" -f "$_"
    fi
}

setup_git() {
    install_package git git-lfs
    get_prestobuntu_file gitconfig $HOME/.gitconfig
}

get_internet_file() {
    wget "$1" --output-document "$2"
}

get_prestobuntu_file() {
    base="https://raw.githubusercontent.com/presto8/prestobuntu/master"
    get_internet_file "$base/$1" "$2"
}

setup_zsh_with_prezto() {
    install_package zsh
    sudo chsh -s /usr/bin/zsh "$USER"

    XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}
    local ZDOTDIR=$XDG_CONFIG_HOME/zsh
    local ZPREZTODIR=$ZDOTDIR/.zprezto

    # prezto
    if [[ -d "$HOME/.zshenv" || -d "$ZPREZTODIR" ]]; then
        return
    fi

    mkdir -p "$ZDOTDIR"

    cat >"$HOME/.zshenv" <<EOF
export ZDOTDIR="$ZDOTDIR"
source "$ZDOTDIR/.zshenv"
EOF

    git clone --recursive https://github.com/sorin-ionescu/prezto.git "$ZPREZTODIR"

    mapfile -d $'\0' rcfiles < <(find "$ZPREZTODIR/runcoms" -name 'z*' -type f -print0)
    for rcfile in "${rcfiles[@]}"; do
        ln -s "$rcfile" "$ZDOTDIR/.$(basename "$rcfile")"
    done

    # zsh-autosuggestions
    git clone https://github.com/zsh-users/zsh-autosuggestions "$ZDOTDIR"/zsh-autosuggestions
    _require_line "source $ZDOTDIR/zsh-autosuggestions/zsh-autosuggestions.zsh" "$ZDOTDIR/.zshrc"

    # autoscreen
    get_prestobuntu_file "autoscreen.zsh" "$ZDOTDIR/autoscreen.zsh"
    _require_line "source $ZDOTDIR/autoscreen.zsh" "$ZDOTDIR/.zshrc"

    # disable zprezto corrections
    _require_line "unsetopt correct" "$ZDOTDIR/.zshrc"
}

setup_screen() {
    install_package screen

    tee $HOME/.screenrc <<'EOF'
startup_message off
msgwait 0  # don't show "New screen..." message
hardstatus alwayslastline
hardstatus string "%{= KW} %H %{= Kw}%{-} %-Lw%{= bW}%n%f %t%{-}%+Lw %=%h %M %d %c"

# https://gist.github.com/martijnvermaat/8070533#gistcomment-1317075
setenv SSH_AUTH_SOCK $HOME/.ssh/ssh_auth_sock
EOF
}

install_development_packages() {
    install_package exuberant-ctags
    install_package flake8
    install_package python3-pip
    install_package curl
    install_ccache
    hash -r
}

install_ccache() {
    install_package ccache
    for i in gcc g++ cc c++; do
        local targ="/usr/local/bin/$i"
        sudo rm -f "$targ"
        sudo ln -s "$(which ccache)" "$targ"
    done
}

install_ripgrep() {
    # ripgrep not available via apt install so have to install this way
    get_internet_file "https://github.com/BurntSushi/ripgrep/releases/download/11.0.2/ripgrep_11.0.2_amd64.deb" /tmp/ripgrep.deb
    sudo dpkg -i "$_"
}

install_fd() {
    if (( UBUNTU_VERSION >= 19 )); then
        install_package fd-find
    else
        get_internet_file https://github.com/sharkdp/fd/releases/download/v8.1.1/fd_8.1.1_amd64.deb /tmp/fd.deb
        sudo dpkg -i "$_"
    fi
}

install_fasd() {
    # provides z for quickjump cd, v for quickedit vim, etc.
    install_package fasd
}

install_rofi_greenclip() {
    install_package rofi
    get_internet_file "https://github.com/erebe/greenclip/releases/download/v4.2/greenclip" /tmp/greenclip
    sudo install /tmp/greenclip /usr/local/bin
}

install_kitty() {
    : install kitty mostly to get terminfo file
    install_package kitty
}

setup_nvim() {
    local nvimdir="$HOME/.config/nvim"
    install_package neovim
    mkdir -p "$nvimdir"
    get_prestobuntu_file "init.lua" "$nvimdir/init.lua"
    install_package fzf
}

setup_static_ip_address() {
    if [[ -v STATIC_IFACE && $STATIC_IFACE ]]; then
        connection_name=$(nmcli -g general.connection device show "$STATIC_IFACE")
        nmcli connection modify "$connection_name" ipv4.addresses "$STATIC_ADDRESS"
        nmcli connection modify "$connection_name" ipv4.method manual
    fi
}

disable_service() {
    for service in "$@"; do
        if systemctl is-enabled "$service" | grep -q enabled ; then
            _systemctl disable --now "$service" ||:
        fi
    done
}

disable_unwanted_services() {
    disable_service cups cups-browsed whoopsie colord

    # note: can't uninstall evolution since it will break Ubuntu; prevent the processes from starting
    sudo find /usr/libexec -type f -name 'evolution-*' -exec chmod -x "{}" \;
}

disable_login_messages() {
    touch "$HOME"/.hushlogin
}

disable_graphical_grub() {
    sudo sed -E -i.bak -e 's|^(GRUB_CMDLINE_LINUX_DEFAULT=")quiet splash(")|\1text\2|' \
                       -e 's|^(GRUB_TIMEOUT_STYLE=).*|\1menu|' \
                       -e 's|^(GRUB_TIMEOUT=).*|\110|' \
                       /etc/default/grub
    sudo update-grub
}

_sed() {
    local from=$1 to=$2 file=$3
    sudo sed -E -i.bak "s|$from|$to|g" "$file"
}

_require_line() {
    # adds line if not present
    local line="$1" file="$2"
    if ! grep -qs --line-regexp --fixed-strings "$line" "$file"; then
        echo "$line" | sudo tee -a "$file" >/dev/null
    fi
}

cloudflare_dns() {
    : configure CloudFlare to take priority over DHCP provided DNS
    local resolv
    resolv=$(head -1 /etc/resolv.conf)
    if [[ $resolv =~ resolvconf ]]; then
        _require_line "nameserver 1.1.1.1" /etc/resolvconf/resolv.conf.d/head
    elif [[ $resolv =~ systemd-resolved ]]; then
        _sed "^#DNS=" "DNS=1.1.1.1" /etc/systemd/resolved.conf
        _systemctl restart systemd-resolved
    fi
}

install_wireless_build_packages() {
    info "install packages needed to compile wpa_supplicant, hostapd, and iwlwifi"
    for i in build-essential libnl-3-dev libnl-genl-3-dev bison flex libssl-dev libreadline-dev libncurses-dev pkg-config; do
        install_package "$i"
    done
}

disable_automatic_updates() {
    disable_service apt-daily.timer unattended-upgrades packagekit apt-daily-upgrade.timer

    sudo sed -E -i.bak 's|"1"|"0"|' /etc/apt/apt.conf.d/10periodic
    sudo sed -E -i.bak 's|"1"|"0"|' /etc/apt/apt.conf.d/20auto-upgrades
    sudo sed -E -i.bak 's|^([^#])|#\1|g' /etc/apt/apt.conf.d/99update-notifier

    sudo pkill -9 update-notifier ||:
    sudo pkill -9 update-manager ||:

    sudo chmod 000 /etc/xdg/autostart/update-notifier.desktop
}

cleanup_user_home() {
    find "$HOME" -maxdepth 1 -type d -empty '!' -name Desktop -delete ||:
    find "$HOME" -name examples.desktop -delete ||:
}

configure_gnome_settings() {
    gsettings="gsettings"
    $gsettings set org.gnome.desktop.wm.preferences focus-mode 'sloppy'
    $gsettings set org.gnome.desktop.screensaver lock-enabled false
    $gsettings set org.gnome.desktop.screensaver ubuntu-lock-on-suspend false
    $gsettings set org.gnome.desktop.peripherals.touchpad natural-scroll true
    $gsettings set org.gnome.settings-daemon.plugins.power lid-close-ac-action 'nothing'

    if (( UBUNTU_VERSION >= 20 )); then
        : disable ubuntu/gnome welcome wizard
        touch "$HOME"/.config/gnome-initial-setup-done
        pkill -9 -f gnome-initial-setup ||:
    fi
}

disable_sleep() {
    _systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target
}

disable_if_installed() {
    for unit in "$@"; do
        if systemctl list-unit-files "$@" &>/dev/null; then
            sudo systemctl disable "$unit"
        fi
    done
}

disable_suspend_on_lid_closed() {
    _require_line "HandleLidSwitch=ignore" /etc/systemd/logind.conf
    _require_line "HandleLidSwitchExternalPower=ignore" /etc/systemd/logind.conf
    # TODO: below command causes session to end and user logout
    # systemctl restart systemd-logind
}

auto_start_terminal() {
    local autostart="$HOME/.config/autostart"
    local file="startup-terminal.desktop"
    mkdir -p "$autostart"
    get_prestobuntu_file "$file" "$autostart/$file"
}

_systemctl() { sudo systemctl "$@" ; }
_info_helper() {
    local color=$1 prefix=$2 ; shift 2
    echo -e "\033[${color}m${prefix}$*\e[0m"
}
info() { _info_helper 36 ":: " "$@" ; }
die() { _info_helper 31 "!! " "$@" ; exit 1; }

main "$@"
