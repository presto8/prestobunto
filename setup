#!/usr/bin/env bash

INSTALL_USER="user"

# NOTE! You probably want to change the key below to your own key
REMOTE_ACCESS_PUBKEY="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCf54m5flMWc5jNo5n5By5OdeR4wJCqH9MARZXjMqGHwi2oipSU4kgkTM00xVoYJpwvTsfbLUsR3XL3VvKyhx8u3p5JOxW0dvQaUx8kq53vgAfXQ4aAU3AdfuK6XJEnFoxSSqnCD0lnNb/dqcUaiml6A+e1KR1S4khsFHUqu6ZuRSK4ozreTqmxv/oCJ9eXFc0dJ1mVzXcZt4LW/qciNsl2/i/sonibJlucWAfFn2XhZYKtPnsycGDiJ47XgPK7aTePcKOz7iL3jLpJETMwldjLy6Mwo/ViuU1X/TrIeoiQyJp/BKho1/Iz/B6GM/Fd+8VElqQfTOMSxakQRI3RqAH5 remoteaccesspubkey"

main() {
    set -e -x
    HOME=/home/$INSTALL_USER

    require_root
    fail_if_no_user
    fail_if_too_many_users

    configure_apt
    setup_zsh
    setup_ssh
    setup_screen
    install_packages
    configure_system
    configure_network eno1
    disable_automatic_updates
    disable_unwanted_services
    cleanup_user_home
    configure_gnome_settings
    configure_x11vnc_remote_access
    disable_graphical_grub
    cloudflare_dns

    echo; echo "prestobuntu setup complete!"
}

require_root() {
    if (( UID != 0 )); then
        echo "must run as root"
        echo "tip: sudo ./setup"
        exit 1
    fi
}

fail_if_no_user() {
    if ! id -u $INSTALL_USER &>/dev/null; then
        : cowardly refusing to run since "$INSTALL_USER" account does not exist
        exit 1
    fi
}

fail_if_too_many_users() {
    home=$(echo /home/*)
    if [[ "$home" != "/home/$INSTALL_USER" ]]; then
        : cowardly refusing to run since /home directory is not as we expected
        exit 2
    fi
}

install_package() {
    if ! dpkg -s "$1" | grep -q "Status: install ok installed"; then
        echo "installing $1"
        apt install -y "$1"
    fi
}

remove_package() {
    if ! dpkg -s "$1" 2>&1 | grep -q "is not installed"; then
        echo "uninstalling $i"
        apt purge -y "$1"
    fi
}

copy_file() {
    cp --backup=numbered "$@"
}

configure_apt() {
    : kill running apt
    while pgrep -f 'apt|aptd'; do
        pkill -f 'apt|aptd' ||:
        sleep 0.1
    done

    if grep -q "RELEASE=16" /etc/lsb-release; then
        : "Add repo needed for vim8"
        if [[ ! -f /etc/apt/sources.list.d/jonathonf-ubuntu-vim-xenial.list ]]; then
            add-apt-repository ppa:jonathonf/vim -y
        fi
    fi

    : Update apt
    apt update
}

configure_system() {
    if ! grep -q NOPASSWD /etc/sudoers; then
        : Allow sudo without password
        sed -E -i.bak 's|^(%sudo.+ALL:ALL\)) (ALL)|\1 NOPASSWD: \2|' /etc/sudoers
    fi

    if ! grep -q ctrl:nocaps /etc/default/keyboard; then
        : Remap CapsLock key as Ctrl
        sed -E -i.bak 's|^(XKBOPTIONS=")(")|\1ctrl:nocaps\2|' /etc/default/keyboard
    fi

    : make journald persistent
    mkdir -p /var/log/journal

    : configure motd to remove update messages
    (cd /etc/update-motd.d
     chmod -x 10-help-text 90-updates-available 91-release-upgrade)
}

configure_network() {
    if grep -q prestobuntu /etc/network/interfaces; then
        return
    fi

    cat >>/etc/network/interfaces <<EOF

# added by prestobuntu
auto $1
iface $1 inet static
address 192.168.250.40/24

auto $1:1
iface $1:1 inet dhcp
EOF
}

setup_ssh() {
    install_package openssh-server

    mkdir -p $HOME/.ssh
    chown $INSTALL_USER:$INSTALL_USER .ssh
    chmod 700 .

    echo "$REMOTE_ACCESS_PUBKEY" >>$HOME/.ssh/authorized_keys
    chown $INSTALL_USER:$INSTALL_USER $HOME/.ssh/authorized_keys
}

setup_zsh() {
    install_package zsh
    chsh -s /usr/bin/zsh $INSTALL_USER

    : liquid prompt
    curl "https://raw.githubusercontent.com/nojhan/liquidprompt/master/liquidprompt" --output $HOME/.liquidprompt
}

setup_screen() {
    install_package screen

    cat >$HOME/.screenrc <<'EOF'
startup_message off
hardstatus alwayslastline
hardstatus string '%{= Kd} %{= Kd}%-w%{= Kr}[%{= KW}%n %t%{= Kr}]%{= Kd}%+w %-= %{KG} %H%{KW}|%{KY}%101`%{KW}|%D %M %d%{= Kc} %C%A%{-}'
EOF
}

install_packages() {
    install_package exuberant-ctags
    install_package git

    install_package vim-gtk3

    install_package python3-pip
    hash -r
}

disable_unwanted_services() {
    systemctl disable --now cups cups-browsed
    systemctl disable --now whoopsie
    systemctl disable --now avahi-daemon ||:
}

disable_graphical_grub() {
    sed -E -i.bak 's|^(GRUB_CMDLINE_LINUX_DEFAULT=")quiet splash(")|\1\2|' /etc/default/grub
    update-grub
}

_sed() {
    from=$1 to=$2 file=$3
    sed -E -i.bak "s|$from|$to|g" "$file"
}

_add_line() {
    # adds line if not present
    line="$1" file="$2"
    if ! grep -q "^$line\$" "$file"; then
        echo "$line" >>"$file"
    fi
}

cloudflare_dns() {
    : configure CloudFlare to take priority over DHCP provided DNS
    resolv=$(head -1 /etc/resolv.conf)
    if [[ $resolv =~ resolvconf ]]; then
        _add_line "nameserver 1.1.1.1" /etc/resolvconf/resolv.conf.d/head
    elif [[ $resolv =~ systemd-resolved ]]; then
        _sed "^#DNS=" "DNS=1.1.1.1" /etc/systemd/resolved.conf
        systemctl restart systemd-resolved
    fi
}

disable_automatic_updates() {
    systemctl disable --now apt-daily.timer
    systemctl disable --now unattended-upgrades

    sed -E -i.bak 's|"1"|"0"|' /etc/apt/apt.conf.d/20auto-upgrades
}

cleanup_user_home() {
    find /home/$INSTALL_USER -type d -empty -delete ||:
    find /home/$INSTALL_USER -name examples.desktop -delete ||:
}

configure_gnome_settings() {
    gsettings="sudo -u $INSTALL_USER -H dbus-launch gsettings"
    $gsettings set org.gnome.desktop.wm.preferences focus-mode 'sloppy'
    $gsettings set org.gnome.desktop.screensaver lock-enabled false
    $gsettings set org.gnome.desktop.screensaver ubuntu-lock-on-suspend false
    $gsettings set org.gnome.desktop.peripherals.touchpad natural-scroll true
    $gsettings set org.gnome.settings-daemon.plugins.power lid-close-ac-action 'nothing'

    if grep -q "RELEASE=16" /etc/lsb-release; then
        $gsettings set org.compiz.unityshell:/org/compiz/profiles/unity/plugins/unityshell/ launcher-hide-mode 1
    fi

    : disable ubuntu/gnome welcome wizard
    sed -E -i.bak 's|^(Exec=.*)$|# \1|' /etc/xdg/autostart/gnome-initial-setup-first-login.desktop
}

configure_x11vnc_remote_access() {
    install_package x11vnc
    cat >/etc/systemd/system/x11vnc.service <<EOF
[Unit]
Description=x11vnc Service
After=multi-user.target

[Service]
Type=Simple
ExecStart=/usr/bin/x11vnc -display :0 -auth /run/user/1000/gdm/Xauthority

[Install]
WantedBy=multi-user.target
EOF

    systemctl daemon-reload
    systemctl enable --now x11vnc
}

main "$@"
